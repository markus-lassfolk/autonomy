<%+header%>

<script type="text/javascript" src="<%=resource%>/cbi.js"></script>
<script type="text/javascript" src="<%=resource%>/autonomy.js"></script>
<script type="text/javascript" src="<%=resource%>/autonomy-pwa.js"></script>

<!-- PWA Manifest -->
<link rel="manifest" href="<%=resource%>/pwa-manifest.json">
<meta name="theme-color" content="#007bff">
<meta name="apple-mobile-web-app-capable" content="yes">
<meta name="apple-mobile-web-app-status-bar-style" content="default">
<meta name="apple-mobile-web-app-title" content="Autonomy">

<div class="cbi-map">
    <div class="cbi-map-descr">
        <h2><%:Autonomy Status%></h2>
        <p><%:Real-time status and monitoring for the autonomy multi-interface failover daemon.%></p>
    </div>

    <div class="cbi-section">
        <div class="cbi-section-node">
            <div class="cbi-value">
                <label class="cbi-value-title"><%:Service Status%></label>
                <div class="cbi-value-field">
                    <span id="service-status" class="status-indicator">Loading...</span>
                    <button id="start-service" class="btn" style="display:none;"><%:Start Service%></button>
                    <button id="stop-service" class="btn" style="display:none;"><%:Stop Service%></button>
                    <button id="restart-service" class="btn" style="display:none;"><%:Restart Service%></button>
                </div>
            </div>
        </div>

        <div class="cbi-section-node">
            <div class="cbi-value">
                <label class="cbi-value-title"><%:Current Interface%></label>
                <div class="cbi-value-field">
                    <span id="current-interface" class="interface-name">Loading...</span>
                </div>
            </div>
        </div>

        <div class="cbi-section-node">
            <div class="cbi-value">
                <label class="cbi-value-title"><%:System Resources%></label>
                <div class="cbi-value-field">
                    <div class="resource-grid">
                        <div class="resource-item">
                            <span class="resource-label"><%:CPU%></span>
                            <div class="progress-bar">
                                <div id="cpu-usage" class="progress-fill" style="width: 0%"></div>
                            </div>
                            <span id="cpu-text" class="resource-text">0%</span>
                        </div>
                        <div class="resource-item">
                            <span class="resource-label"><%:Memory%></span>
                            <div class="progress-bar">
                                <div id="memory-usage" class="progress-fill" style="width: 0%"></div>
                            </div>
                            <span id="memory-text" class="resource-text">0%</span>
                        </div>
                        <div class="resource-item">
                            <span class="resource-label"><%:Disk%></span>
                            <div class="progress-bar">
                                <div id="disk-usage" class="progress-fill" style="width: 0%"></div>
                            </div>
                            <span id="disk-text" class="resource-text">0%</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="cbi-section">
        <h3><%:Interface Status%></h3>
        <div class="cbi-section-node">
            <div id="interfaces-container" class="interfaces-grid">
                <!-- Interfaces will be populated by JavaScript -->
            </div>
        </div>
    </div>

    <div class="cbi-section">
        <h3><%:Recent Activity%></h3>
        <div class="cbi-section-node">
            <div class="cbi-value">
                <label class="cbi-value-title"><%:Last Failover%></label>
                <div class="cbi-value-field">
                    <span id="last-failover">None</span>
                </div>
            </div>
        </div>
        <div class="cbi-section-node">
            <div class="cbi-value">
                <label class="cbi-value-title"><%:Uptime%></label>
                <div class="cbi-value-field">
                    <span id="uptime">Loading...</span>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
.status-indicator {
    padding: 4px 8px;
    border-radius: 4px;
    font-weight: bold;
    margin-right: 10px;
}

.status-indicator.running {
    background-color: #d4edda;
    color: #155724;
    border: 1px solid #c3e6cb;
}

.status-indicator.stopped {
    background-color: #f8d7da;
    color: #721c24;
    border: 1px solid #f5c6cb;
}

.status-indicator.loading {
    background-color: #fff3cd;
    color: #856404;
    border: 1px solid #ffeaa7;
}

.interface-name {
    font-weight: bold;
    color: #007bff;
}

.resource-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 15px;
    margin-top: 10px;
}

.resource-item {
    display: flex;
    flex-direction: column;
    align-items: center;
}

.resource-label {
    font-weight: bold;
    margin-bottom: 5px;
}

.progress-bar {
    width: 100%;
    height: 20px;
    background-color: #e9ecef;
    border-radius: 10px;
    overflow: hidden;
    margin-bottom: 5px;
}

.progress-fill {
    height: 100%;
    background: linear-gradient(90deg, #28a745, #20c997);
    transition: width 0.3s ease;
}

.progress-fill.warning {
    background: linear-gradient(90deg, #ffc107, #fd7e14);
}

.progress-fill.danger {
    background: linear-gradient(90deg, #dc3545, #e83e8c);
}

.resource-text {
    font-size: 12px;
    color: #6c757d;
}

.interfaces-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 15px;
    margin-top: 10px;
}

.interface-card {
    border: 1px solid #dee2e6;
    border-radius: 8px;
    padding: 15px;
    background-color: #f8f9fa;
}

.interface-card.active {
    border-color: #28a745;
    background-color: #d4edda;
}

.interface-card.disabled {
    border-color: #6c757d;
    background-color: #e9ecef;
    opacity: 0.6;
}

.interface-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 10px;
}

.interface-name {
    font-weight: bold;
    font-size: 16px;
}

.interface-status {
    padding: 2px 6px;
    border-radius: 3px;
    font-size: 12px;
    font-weight: bold;
}

.interface-status.up {
    background-color: #28a745;
    color: white;
}

.interface-status.down {
    background-color: #dc3545;
    color: white;
}

.interface-status.disabled {
    background-color: #6c757d;
    color: white;
}

.interface-metrics {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 10px;
    font-size: 14px;
}

.metric-item {
    display: flex;
    justify-content: space-between;
}

.metric-label {
    color: #6c757d;
}

.metric-value {
    font-weight: bold;
}

.btn {
    padding: 6px 12px;
    border: 1px solid #007bff;
    background-color: #007bff;
    color: white;
    border-radius: 4px;
    cursor: pointer;
    margin-left: 5px;
    font-size: 14px;
}

.btn:hover {
    background-color: #0056b3;
    border-color: #0056b3;
}

.btn.danger {
    background-color: #dc3545;
    border-color: #dc3545;
}

.btn.danger:hover {
    background-color: #c82333;
    border-color: #bd2130;
}

.btn.success {
    background-color: #28a745;
    border-color: #28a745;
}

.btn.success:hover {
    background-color: #218838;
    border-color: #1e7e34;
}
</style>

<script type="text/javascript">
// Global variables
let updateInterval;
let serviceStatus = 'unknown';

// Initialize the page
document.addEventListener('DOMContentLoaded', function() {
    loadStatus();
    startAutoRefresh();
});

// Load status data
function loadStatus() {
    // Load service status
    fetch('<%=luci.dispatcher.build_url("admin/network/autonomy/api/service_status")%>')
        .then(response => response.json())
        .then(data => updateServiceStatus(data))
        .catch(error => console.error('Error loading service status:', error));

    // Load autonomy status
    fetch('<%=luci.dispatcher.build_url("admin/network/autonomy/api/status")%>')
        .then(response => response.json())
        .then(data => updateAutonomyStatus(data))
        .catch(error => console.error('Error loading autonomy status:', error));

    // Load interfaces
    fetch('<%=luci.dispatcher.build_url("admin/network/autonomy/api/interfaces")%>')
        .then(response => response.json())
        .then(data => updateInterfaces(data))
        .catch(error => console.error('Error loading interfaces:', error));

    // Load resources
    fetch('<%=luci.dispatcher.build_url("admin/network/autonomy/api/resources")%>')
        .then(response => response.json())
        .then(data => updateResources(data))
        .catch(error => console.error('Error loading resources:', error));
}

// Update service status
function updateServiceStatus(data) {
    const statusElement = document.getElementById('service-status');
    const startBtn = document.getElementById('start-service');
    const stopBtn = document.getElementById('stop-service');
    const restartBtn = document.getElementById('restart-service');

    if (data.running) {
        statusElement.textContent = 'Running';
        statusElement.className = 'status-indicator running';
        startBtn.style.display = 'none';
        stopBtn.style.display = 'inline-block';
        restartBtn.style.display = 'inline-block';
        serviceStatus = 'running';
    } else {
        statusElement.textContent = 'Stopped';
        statusElement.className = 'status-indicator stopped';
        startBtn.style.display = 'inline-block';
        stopBtn.style.display = 'none';
        restartBtn.style.display = 'none';
        serviceStatus = 'stopped';
    }

    if (data.pid) {
        statusElement.textContent += ` (PID: ${data.pid})`;
    }
}

// Update autonomy status
function updateAutonomyStatus(data) {
    if (data.error) {
        console.error('Autonomy status error:', data.error);
        return;
    }

    // Update current interface
    if (data.current_interface) {
        document.getElementById('current-interface').textContent = data.current_interface;
    }

    // Update uptime
    if (data.uptime) {
        document.getElementById('uptime').textContent = data.uptime;
    }

    // Update last failover
    if (data.last_failover) {
        document.getElementById('last-failover').textContent = data.last_failover;
    }
}

// Update interfaces
function updateInterfaces(data) {
    if (data.error) {
        console.error('Interfaces error:', data.error);
        return;
    }

    const container = document.getElementById('interfaces-container');
    container.innerHTML = '';

    if (data.interfaces && Array.isArray(data.interfaces)) {
        data.interfaces.forEach(iface => {
            const card = createInterfaceCard(iface);
            container.appendChild(card);
        });
    }
}

// Create interface card
function createInterfaceCard(iface) {
    const card = document.createElement('div');
    card.className = `interface-card ${iface.active ? 'active' : ''} ${iface.enabled ? '' : 'disabled'}`;

    const statusClass = iface.enabled ? (iface.up ? 'up' : 'down') : 'disabled';
    const statusText = iface.enabled ? (iface.up ? 'UP' : 'DOWN') : 'DISABLED';

    card.innerHTML = `
        <div class="interface-header">
            <span class="interface-name">${iface.name}</span>
            <span class="interface-status ${statusClass}">${statusText}</span>
        </div>
        <div class="interface-metrics">
            <div class="metric-item">
                <span class="metric-label">Type:</span>
                <span class="metric-value">${iface.type || 'Unknown'}</span>
            </div>
            <div class="metric-item">
                <span class="metric-label">Priority:</span>
                <span class="metric-value">${iface.priority || 'N/A'}</span>
            </div>
            <div class="metric-item">
                <span class="metric-label">Latency:</span>
                <span class="metric-value">${iface.latency ? iface.latency + 'ms' : 'N/A'}</span>
            </div>
            <div class="metric-item">
                <span class="metric-label">Loss:</span>
                <span class="metric-value">${iface.loss ? iface.loss + '%' : 'N/A'}</span>
            </div>
        </div>
    `;

    return card;
}

// Update resources
function updateResources(data) {
    if (data.error) {
        console.error('Resources error:', data.error);
        return;
    }

    // Update CPU usage
    if (data.cpu !== undefined) {
        const cpuElement = document.getElementById('cpu-usage');
        const cpuText = document.getElementById('cpu-text');
        cpuElement.style.width = data.cpu + '%';
        cpuText.textContent = data.cpu.toFixed(1) + '%';
        
        if (data.cpu > 80) {
            cpuElement.className = 'progress-fill danger';
        } else if (data.cpu > 60) {
            cpuElement.className = 'progress-fill warning';
        } else {
            cpuElement.className = 'progress-fill';
        }
    }

    // Update memory usage
    if (data.memory !== undefined) {
        const memElement = document.getElementById('memory-usage');
        const memText = document.getElementById('memory-text');
        memElement.style.width = data.memory + '%';
        memText.textContent = data.memory.toFixed(1) + '%';
        
        if (data.memory > 80) {
            memElement.className = 'progress-fill danger';
        } else if (data.memory > 60) {
            memElement.className = 'progress-fill warning';
        } else {
            memElement.className = 'progress-fill';
        }
    }

    // Update disk usage
    if (data.disk !== undefined) {
        const diskElement = document.getElementById('disk-usage');
        const diskText = document.getElementById('disk-text');
        diskElement.style.width = data.disk + '%';
        diskText.textContent = data.disk.toFixed(1) + '%';
        
        if (data.disk > 90) {
            diskElement.className = 'progress-fill danger';
        } else if (data.disk > 80) {
            diskElement.className = 'progress-fill warning';
        } else {
            diskElement.className = 'progress-fill';
        }
    }
}

// Service control functions
document.getElementById('start-service').addEventListener('click', function() {
    if (confirm('Start the autonomy service?')) {
        fetch('<%=luci.dispatcher.build_url("admin/network/autonomy/api/reload")%>', {
            method: 'POST'
        }).then(() => {
            setTimeout(loadStatus, 1000);
        });
    }
});

document.getElementById('stop-service').addEventListener('click', function() {
    if (confirm('Stop the autonomy service?')) {
        fetch('<%=luci.dispatcher.build_url("admin/network/autonomy/api/reload")%>', {
            method: 'POST'
        }).then(() => {
            setTimeout(loadStatus, 1000);
        });
    }
});

document.getElementById('restart-service').addEventListener('click', function() {
    if (confirm('Restart the autonomy service?')) {
        fetch('<%=luci.dispatcher.build_url("admin/network/autonomy/api/reload")%>', {
            method: 'POST'
        }).then(() => {
            setTimeout(loadStatus, 1000);
        });
    }
});

// Auto-refresh
function startAutoRefresh() {
    updateInterval = setInterval(loadStatus, 5000); // Update every 5 seconds
}

function stopAutoRefresh() {
    if (updateInterval) {
        clearInterval(updateInterval);
    }
}

// Cleanup on page unload
window.addEventListener('beforeunload', stopAutoRefresh);
</script>

<%+footer%>

