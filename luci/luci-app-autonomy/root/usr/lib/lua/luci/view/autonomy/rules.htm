<%+header%>

<h2><%:autonomy Rule Engine Management%></h2>

<div class="cbi-section">
    <div class="cbi-section-descr"><%:Configure and monitor automated rules for failover decisions, maintenance tasks, and system optimization.%></div>
    
    <!-- Rule Engine Status -->
    <div class="cbi-section">
        <h3><%:Engine Status%></h3>
        <div id="rule-engine-status">
            <div class="status-grid">
                <div class="status-item">
                    <span class="status-label"><%:Engine Status%>:</span>
                    <span id="engine-status" class="status-value">-</span>
                </div>
                <div class="status-item">
                    <span class="status-label"><%:Active Rules%>:</span>
                    <span id="active-rules" class="status-value">-</span>
                </div>
                <div class="status-item">
                    <span class="status-label"><%:Total Executions%>:</span>
                    <span id="total-executions" class="status-value">-</span>
                </div>
                <div class="status-item">
                    <span class="status-label"><%:Last Execution%>:</span>
                    <span id="last-execution" class="status-value">-</span>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Active Rules -->
    <div class="cbi-section">
        <h3><%:Active Rules%></h3>
        <div class="cbi-section-descr"><%:Currently configured and active rules.%></div>
        <div id="active-rules-list">
            <div class="rules-container">
                <table class="table">
                    <thead>
                        <tr>
                            <th><%:Name%></th>
                            <th><%:Type%></th>
                            <th><%:Priority%></th>
                            <th><%:Status%></th>
                            <th><%:Last Triggered%></th>
                            <th><%:Actions%></th>
                        </tr>
                    </thead>
                    <tbody id="active-rules-tbody">
                        <tr><td colspan="6"><%:Loading...%></td></tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    
    <!-- Rule Templates -->
    <div class="cbi-section">
        <h3><%:Quick Rule Templates%></h3>
        <div class="cbi-section-descr"><%:Common rule templates for quick setup.%></div>
        <div class="template-grid">
            <div class="template-item">
                <h4><%:Obstruction Map Clear%></h4>
                <p><%:Clear Starlink obstruction map after movement and stationary period.%></p>
                <button class="btn cbi-button cbi-button-apply" onclick="createObstructionRule()"><%:Create Rule%></button>
            </div>
            <div class="template-item">
                <h4><%:WiFi Optimization%></h4>
                <p><%:Trigger WiFi optimization after significant movement.%></p>
                <button class="btn cbi-button cbi-button-apply" onclick="createWiFiRule()"><%:Create Rule%></button>
            </div>
            <div class="template-item">
                <h4><%:Nightly Maintenance%></h4>
                <p><%:Perform system maintenance at 3 AM daily.%></p>
                <button class="btn cbi-button cbi-button-apply" onclick="createMaintenanceRule()"><%:Create Rule%></button>
            </div>
            <div class="template-item">
                <h4><%:Emergency Failover%></h4>
                <p><%:Emergency failover on rapid signal degradation.%></p>
                <button class="btn cbi-button cbi-button-apply" onclick="createEmergencyRule()"><%:Create Rule%></button>
            </div>
        </div>
    </div>
    
    <!-- Execution History -->
    <div class="cbi-section">
        <h3><%:Execution History%></h3>
        <div id="execution-history">
            <div class="history-container">
                <table class="table">
                    <thead>
                        <tr>
                            <th><%:Time%></th>
                            <th><%:Rule Name%></th>
                            <th><%:Action%></th>
                            <th><%:Result%></th>
                            <th><%:Duration%></th>
                        </tr>
                    </thead>
                    <tbody id="execution-tbody">
                        <tr><td colspan="5"><%:Loading...%></td></tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    
    <!-- Rule Statistics -->
    <div class="cbi-section">
        <h3><%:Statistics%></h3>
        <div id="rule-statistics">
            <div class="stats-grid">
                <div class="stat-item">
                    <span class="stat-label"><%:Success Rate%>:</span>
                    <span id="success-rate" class="stat-value">-</span>
                </div>
                <div class="stat-item">
                    <span class="stat-label"><%:Average Execution Time%>:</span>
                    <span id="avg-execution-time" class="stat-value">-</span>
                </div>
                <div class="stat-item">
                    <span class="stat-label"><%:Most Active Rule%>:</span>
                    <span id="most-active-rule" class="stat-value">-</span>
                </div>
                <div class="stat-item">
                    <span class="stat-label"><%:Rules in Cooldown%>:</span>
                    <span id="rules-cooldown" class="stat-value">-</span>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
.status-grid, .stats-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 15px;
    margin: 15px 0;
}

.status-item, .stat-item {
    display: flex;
    justify-content: space-between;
    padding: 10px;
    background: #f9f9f9;
    border-radius: 4px;
    border-left: 4px solid #007cba;
}

.status-label, .stat-label {
    font-weight: bold;
    color: #666;
}

.status-value, .stat-value {
    color: #333;
    font-weight: 500;
}

.template-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 20px;
    margin: 15px 0;
}

.template-item {
    padding: 15px;
    background: #f9f9f9;
    border-radius: 4px;
    border: 1px solid #ddd;
}

.template-item h4 {
    margin: 0 0 10px 0;
    color: #333;
}

.template-item p {
    margin: 0 0 15px 0;
    color: #666;
    font-size: 14px;
}

.rules-container, .history-container {
    max-height: 400px;
    overflow-y: auto;
}

.table {
    width: 100%;
    border-collapse: collapse;
}

.table th, .table td {
    padding: 8px;
    text-align: left;
    border-bottom: 1px solid #ddd;
}

.table th {
    background-color: #f5f5f5;
    font-weight: bold;
}

.status-active {
    color: #4CAF50;
}

.status-inactive {
    color: #f44336;
}

.status-cooldown {
    color: #ff9800;
}

.result-success {
    color: #4CAF50;
}

.result-failed {
    color: #f44336;
}

.result-pending {
    color: #ff9800;
}
</style>

<script type="text/javascript">
// Load rules data
function loadRulesData() {
    XHR.get('<%=luci.dispatcher.build_url("admin", "network", "autonomy", "rules_data")%>', null, function(xhr) {
        if (xhr.status === 200) {
            const data = JSON.parse(xhr.responseText);
            updateRulesDisplay(data);
        }
    });
}

// Update rules display
function updateRulesDisplay(data) {
    // Update status
    if (data.stats) {
        document.getElementById('engine-status').textContent = data.stats.enabled ? 'Enabled' : 'Disabled';
        document.getElementById('active-rules').textContent = data.stats.active_rules || 0;
        document.getElementById('total-executions').textContent = data.stats.total_executions || 0;
        document.getElementById('last-execution').textContent = data.stats.last_execution_time || 'Never';
        
        // Update statistics
        const successRate = data.stats.success_rate || 0;
        document.getElementById('success-rate').textContent = successRate + '%';
        document.getElementById('avg-execution-time').textContent = formatDuration(data.stats.avg_execution_time);
        document.getElementById('most-active-rule').textContent = data.stats.most_active_rule || 'None';
        document.getElementById('rules-cooldown').textContent = data.stats.rules_in_cooldown || 0;
    }
    
    // Update active rules
    if (data.rules) {
        updateActiveRulesTable(data.rules);
    }
    
    // Update execution history
    if (data.execution_history) {
        updateExecutionHistoryTable(data.execution_history);
    }
}

// Update active rules table
function updateActiveRulesTable(rules) {
    const tbody = document.getElementById('active-rules-tbody');
    tbody.innerHTML = '';
    
    if (rules.length === 0) {
        tbody.innerHTML = '<tr><td colspan="6"><%:No active rules configured%></td></tr>';
        return;
    }
    
    rules.forEach(function(rule) {
        const row = document.createElement('tr');
        row.innerHTML = `
            <td>${rule.name || '-'}</td>
            <td>${rule.type || '-'}</td>
            <td>${rule.priority || '-'}</td>
            <td><span class="status-${rule.status || 'inactive'}">${rule.status || 'Inactive'}</span></td>
            <td>${rule.last_triggered || 'Never'}</td>
            <td>
                <button class="btn cbi-button cbi-button-apply" onclick="toggleRule('${rule.id}')">${rule.enabled ? 'Disable' : 'Enable'}</button>
                <button class="btn cbi-button cbi-button-reset" onclick="deleteRule('${rule.id}')"><%:Delete%></button>
            </td>
        `;
        tbody.appendChild(row);
    });
}

// Update execution history table
function updateExecutionHistoryTable(history) {
    const tbody = document.getElementById('execution-tbody');
    tbody.innerHTML = '';
    
    if (history.length === 0) {
        tbody.innerHTML = '<tr><td colspan="5"><%:No execution history available%></td></tr>';
        return;
    }
    
    history.forEach(function(execution) {
        const row = document.createElement('tr');
        row.innerHTML = `
            <td>${execution.timestamp || '-'}</td>
            <td>${execution.rule_name || '-'}</td>
            <td>${execution.action || '-'}</td>
            <td><span class="result-${execution.result || 'pending'}">${execution.result || 'Pending'}</span></td>
            <td>${formatDuration(execution.duration)}</td>
        `;
        tbody.appendChild(row);
    });
}

// Format duration for display
function formatDuration(seconds) {
    if (!seconds) return '-';
    
    if (seconds < 60) {
        return seconds + 's';
    } else if (seconds < 3600) {
        return Math.round(seconds / 60) + 'm';
    } else {
        return Math.round(seconds / 3600) + 'h';
    }
}

// Rule template functions
function createObstructionRule() {
    const rule = {
        name: "Obstruction Map Clear",
        type: "location",
        conditions: [
            {
                type: "movement",
                operator: "gte",
                value: 50
            },
            {
                type: "stationary",
                operator: "gte",
                value: 1800
            }
        ],
        actions: [
            {
                type: "clear_obstruction_map"
            }
        ],
        priority: 1,
        cooldown: 3600
    };
    
    createRule(rule);
}

function createWiFiRule() {
    const rule = {
        name: "WiFi Optimization",
        type: "location",
        conditions: [
            {
                type: "movement",
                operator: "gte",
                value: 500
            },
            {
                type: "stationary",
                operator: "gte",
                value: 1800
            }
        ],
        actions: [
            {
                type: "optimize_wifi"
            }
        ],
        priority: 2,
        cooldown: 7200
    };
    
    createRule(rule);
}

function createMaintenanceRule() {
    const rule = {
        name: "Nightly Maintenance",
        type: "schedule",
        conditions: [
            {
                type: "time",
                operator: "eq",
                value: "03:00"
            }
        ],
        actions: [
            {
                type: "log_rotation"
            },
            {
                type: "cleanup"
            },
            {
                type: "optimization"
            }
        ],
        priority: 3,
        cooldown: 86400
    };
    
    createRule(rule);
}

function createEmergencyRule() {
    const rule = {
        name: "Emergency Failover",
        type: "metric",
        conditions: [
            {
                type: "signal_degradation",
                operator: "gte",
                value: 50
            }
        ],
        actions: [
            {
                type: "emergency_failover"
            }
        ],
        priority: 0,
        cooldown: 300
    };
    
    createRule(rule);
}

// Create rule via ubus
function createRule(rule) {
    const formData = new FormData();
    formData.append('rule', JSON.stringify(rule));
    
    XHR.post('<%=luci.dispatcher.build_url("admin", "network", "autonomy", "create_rule")%>', formData, function(xhr) {
        if (xhr.status === 200) {
            const response = JSON.parse(xhr.responseText);
            if (response.success) {
                alert('<%:Rule created successfully%>');
                loadRulesData();
            } else {
                alert('<%:Failed to create rule%>: ' + response.message);
            }
        }
    });
}

// Toggle rule
function toggleRule(ruleId) {
    const formData = new FormData();
    formData.append('rule_id', ruleId);
    
    XHR.post('<%=luci.dispatcher.build_url("admin", "network", "autonomy", "toggle_rule")%>', formData, function(xhr) {
        if (xhr.status === 200) {
            const response = JSON.parse(xhr.responseText);
            if (response.success) {
                loadRulesData();
            } else {
                alert('<%:Failed to toggle rule%>: ' + response.message);
            }
        }
    });
}

// Delete rule
function deleteRule(ruleId) {
    if (confirm('<%:Are you sure you want to delete this rule?%>')) {
        const formData = new FormData();
        formData.append('rule_id', ruleId);
        
        XHR.post('<%=luci.dispatcher.build_url("admin", "network", "autonomy", "delete_rule")%>', formData, function(xhr) {
            if (xhr.status === 200) {
                const response = JSON.parse(xhr.responseText);
                if (response.success) {
                    loadRulesData();
                } else {
                    alert('<%:Failed to delete rule%>: ' + response.message);
                }
            }
        });
    }
}

// Initialize page
document.addEventListener('DOMContentLoaded', function() {
    loadRulesData();
    
    // Auto-refresh every 30 seconds
    setInterval(loadRulesData, 30000);
});
</script>

<%+footer%>
