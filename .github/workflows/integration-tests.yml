name: Go Integration Tests

on:
  push:
    branches: [ '*' ]
    paths:
      - '**/*.go'
      - 'go.mod'
      - 'go.sum'
      - 'pkg/**'
      - 'cmd/**'
  pull_request:
    branches: [ '*' ]
    paths:
      - '**/*.go'
      - 'go.mod'
      - 'go.sum'
      - 'pkg/**'
      - 'cmd/**'

jobs:
  go-integration:
    runs-on: ubuntu-latest
    name: Go Integration Tests
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'
          cache: true
      
      - name: Install test dependencies
        run: |
          go mod download
          go install github.com/stretchr/testify@latest
          go install github.com/golang/mock/mockgen@latest
      
      - name: Run integration tests
        run: |
          echo "Running Go integration tests..."
          
          # Run tests with verbose output and coverage
          go test -v -race -coverprofile=integration.out ./pkg/...
          
          # Run integration tests for specific packages
          echo "Testing controller package..."
          go test -v -race ./pkg/controller/...
          
          echo "Testing decision engine..."
          go test -v -race ./pkg/decision/...
          
          echo "Testing discovery package..."
          go test -v -race ./pkg/discovery/...
          
          echo "Testing health server..."
          go test -v -race ./pkg/health/...
          
          echo "Testing metrics server..."
          go test -v -race ./pkg/metrics/...
          
          echo "Testing MQTT client..."
          go test -v -race ./pkg/mqtt/...
          
          echo "Testing telemetry store..."
          go test -v -race ./pkg/telem/...
          
          echo "Testing UCI configuration..."
          go test -v -race ./pkg/uci/...
          
          echo "Testing UBUS client/server..."
          go test -v -race ./pkg/ubus/...
      
      - name: Test binary compilation
        run: |
          echo "Testing binary compilation..."
          
          # Test autonomyd compilation
          echo "Building autonomyd..."
          go build -o /tmp/autonomyd ./cmd/autonomyd
          if [ -f /tmp/autonomyd ]; then
            echo "✅ autonomyd compiled successfully"
            /tmp/autonomyd -version
          else
            echo "::error::autonomyd failed to compile"
            exit 1
          fi
          
          # Test autonomysysmgmt compilation
          echo "Building autonomysysmgmt..."
          go build -o /tmp/autonomysysmgmt ./cmd/autonomysysmgmt
          if [ -f /tmp/autonomysysmgmt ]; then
            echo "✅ autonomysysmgmt compiled successfully"
            /tmp/autonomysysmgmt -version
          else
            echo "::error::autonomysysmgmt failed to compile"
            exit 1
          fi
      
      - name: Test configuration loading
        run: |
          echo "Testing configuration loading..."
          
          # Create a test configuration file
          cat > /tmp/test-config << 'EOF'
          config autonomy
              option enabled '1'
              option log_level 'info'
              option predictive '1'
              option use_mwan3 '1'
              option retention_hours '24'
              option max_ram_mb '100'
              option performance_profiling '0'
          EOF
          
          # Test configuration loading
          if go run ./cmd/autonomyd -config /tmp/test-config -version; then
            echo "✅ Configuration loading works correctly"
          else
            echo "::error::Configuration loading failed"
            exit 1
          fi
      
      - name: Test package dependencies
        run: |
          echo "Testing package dependencies..."
          
          # Check for circular dependencies
          go mod graph | grep -v "github.com/markus-lassfolk/autonomy" | sort | uniq -c | sort -nr | head -10
          
          # Verify all dependencies are properly declared
          go mod verify
          
          # Check for unused dependencies
          go mod tidy
          if [ -n "$(git status --porcelain go.mod go.sum)" ]; then
            echo "::warning::go.mod or go.sum has uncommitted changes"
          fi
      
      - name: Test cross-compilation
        run: |
          echo "Testing cross-compilation for different architectures..."
          
          # Test compilation for different platforms
          for os in linux darwin windows; do
            for arch in amd64 arm64; do
              echo "Building for $os/$arch..."
              GOOS=$os GOARCH=$arch go build -o /tmp/autonomyd-$os-$arch ./cmd/autonomyd
              if [ -f "/tmp/autonomyd-$os-$arch" ]; then
                echo "✅ Compiled successfully for $os/$arch"
              else
                echo "::error::Failed to compile for $os/$arch"
                exit 1
              fi
            done
          done
