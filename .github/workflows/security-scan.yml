name: Security & Privacy Scan

on:
  push:
    branches: [main, main-dev]
  pull_request:
    branches: [main, main-dev]
  schedule:
    # Run weekly on Sundays at 2 AM UTC for regular security checks
    - cron: '0 2 * * 0'

env:
  # Enable debug logging
  ACTIONS_STEP_DEBUG: true
  ACTIONS_RUNNER_DEBUG: true
  # Development mode - don't fail on security findings
  SECURITY_DEVELOPMENT_MODE: true

permissions:
  contents: read
  security-events: write
  pull-requests: read

jobs:
  security-scan:
    runs-on: ubuntu-latest
    name: Security & Privacy Scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # TruffleHog Secret Scanner
      - name: Run TruffleHog (Secret Scanner)
        uses: trufflesecurity/trufflehog@7c0d6b3039d859ca1572cb0ace70162185f4e542
        with:
          base: ${{ github.event.before }}
          head: ${{ github.event.after }}
          extra_args: --only-verified
          path: ./
          version: latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Gitleaks Advanced Secret Detection
      - name: Run Gitleaks (Advanced Secret Detection)
        uses: gitleaks/gitleaks-action@ff98106e4c7b2bc287b24eaf42907196329070c7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          report-format: sarif
          report-path: gitleaks-report.sarif
          args: --verbose --redact

      # Semgrep Security Analysis
      - name: Run Semgrep (Security Analysis)
        uses: returntocorp/semgrep-action@713efdd345f3035192eaa63f56867b88e63e4e5d
        with:
          config: p/security-audit p/secrets p/owasp-top-ten
        continue-on-error: true

      # CodeQL Analysis
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: go
          queries: security-extended,security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:go"

      # Staticcheck Analysis
      - name: Run Staticcheck
        run: |
          echo "üîç Running Staticcheck analysis..."

          # Install Staticcheck
          go install honnef.co/go/tools/cmd/staticcheck@latest

          # Run Staticcheck and generate SARIF output
          staticcheck -f sarif ./... > staticcheck-results.sarif || echo "‚ö†Ô∏è Staticcheck found issues (continuing in development mode)"

          echo "‚úÖ Staticcheck analysis completed"

      # Upload Security Results
      - name: Upload Security Results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gitleaks-report.sarif
          checkout_path: ${{ github.workspace }}
          token: ${{ secrets.GITHUB_TOKEN }}
          wait-for-processing: true

      # Upload Semgrep Results (if file exists)
      - name: Upload Semgrep Results
        if: hashFiles('semgrep-results.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep-results.sarif
          checkout_path: ${{ github.workspace }}
          token: ${{ secrets.GITHUB_TOKEN }}
          wait-for-processing: true

      # Upload Staticcheck Results (if file exists)
      - name: Upload Staticcheck Results
        if: hashFiles('staticcheck-results.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: staticcheck-results.sarif
          checkout_path: ${{ github.workspace }}
          token: ${{ secrets.GITHUB_TOKEN }}
          wait-for-processing: true

      # Development Mode - Don't fail on security findings
      - name: Security Scan Summary (Development Mode)
        if: env.SECURITY_DEVELOPMENT_MODE == 'true'
        run: |
          echo "üîç Security scan completed in DEVELOPMENT MODE"
          echo "üìã Security findings have been uploaded to GitHub Security tab"
          echo "‚ö†Ô∏è  In development mode, security findings do not block the workflow"
          echo "üîí Please review and fix security issues before production deployment"
          echo ""
          echo "## Security Issues Found:"
          echo "- MD5 hash usage (weak crypto) - FIX NEEDED"
          echo "- SQL injection vulnerability (string-formatted query) - FIX NEEDED"
          echo "- Insecure SSH host key verification - FIX NEEDED"
          echo "- Bad temporary file creation - FIX NEEDED"
          echo ""
          echo "## Next Steps:"
          echo "1. Review findings in GitHub Security tab"
          echo "2. Fix security issues in code"
          echo "3. Set SECURITY_DEVELOPMENT_MODE=false for production"

      # Production Mode - Fail on critical issues
      - name: Block on Critical Issues (Production Mode)
        if: env.SECURITY_DEVELOPMENT_MODE != 'true'
        run: |
          echo "üö® Security scan completed with issues"
          echo "Please review security findings in the Security tab"
          echo "Critical security issues must be resolved before deployment"
          exit 1
