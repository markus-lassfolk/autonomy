name: Security & Privacy Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  security-scan:
    runs-on: ubuntu-latest
    name: Security & Privacy Scan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better scanning
        
    - name: Run TruffleHog (Secret Scanner)
      uses: trufflesecurity/trufflehog@main
      env:
        GITHUB_TOKEN: ${{ secrets.AUTONOMY_GH_TOKEN }}
      with:
        base: ${{ github.event.before }}
        head: ${{ github.event.after }}
        extra_args: --only-verified --fail --no-update
        
    - name: Run Gitleaks (Advanced Secret Detection)
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.AUTONOMY_GH_TOKEN }}
        GITLEAKS_ENABLE_UPLOAD_ARTIFACT: true
        GITLEAKS_ENABLE_SUMMARY: true
      with:
        github-token: ${{ secrets.AUTONOMY_GH_TOKEN }}
        report-format: sarif
        report-path: gitleaks-report.sarif
        redact: true
        verbose: true
        
    - name: Run Semgrep (Code Security Analysis)
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/owasp-top-ten
          p/golang
        
    - name: Run Go Security Scanner (gosec)
      run: |
        go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
        gosec -fmt sarif -out gosec-results.sarif ./...
        
    - name: Run Staticcheck (Go Static Analysis)
      run: |
        go install honnef.co/go/tools/cmd/staticcheck@latest
        staticcheck -f sarif ./... > staticcheck-results.sarif
        
    - name: Run Govulncheck (Vulnerability Scanner)
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck -json ./... > govulncheck-results.json
        
    - name: Privacy & PII Detection
      run: |
        # Install privacy scanning tools
        pip install detect-secrets
        npm install -g @snyk/iac-rules
        
        # Scan for PII patterns
        echo "Scanning for PII patterns..."
        find . -name "*.go" -o -name "*.md" -o -name "*.json" -o -name "*.yaml" -o -name "*.yml" | \
        xargs grep -l -i -E "(email|phone|address|ssn|credit.?card|password|secret|key|token)" || true
        
        # Scan for hardcoded credentials
        detect-secrets scan --baseline .secrets.baseline || true
        
    - name: Upload Security Results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: gitleaks-report.sarif
        
    - name: Upload Semgrep Results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: semgrep-results.sarif
        
    - name: Upload Staticcheck Results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: staticcheck-results.sarif
        
    - name: Create Security Summary
      if: always()
      run: |
        echo "## ðŸ”’ Security Scan Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Count findings
        if [ -f "gitleaks-report.sarif" ]; then
          SECRETS=$(jq '.runs[0].results | length' gitleaks-report.sarif 2>/dev/null || echo "0")
          echo "**Secrets Found**: $SECRETS" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -f "semgrep-results.sarif" ]; then
          SEMGREP=$(jq '.runs[0].results | length' semgrep-results.sarif 2>/dev/null || echo "0")
          echo "**Security Issues**: $SEMGREP" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -f "gosec-results.sarif" ]; then
          GOSEC=$(jq '.runs[0].results | length' gosec-results.sarif 2>/dev/null || echo "0")
          echo "**Go Security Issues**: $GOSEC" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "ðŸ“Š **Full reports available in Security tab**" >> $GITHUB_STEP_SUMMARY
        
    - name: Block on Critical Issues
      if: failure()
      run: |
        echo "ðŸš¨ Critical security issues found!"
        echo "Please review and fix security vulnerabilities before merging."
        exit 1
