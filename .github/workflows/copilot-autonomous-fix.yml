name: Copilot Autonomous Issue Resolution

on:
  issues:
    types: [opened, labeled]
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Issue number to process'
        required: false
        type: number

permissions:
  contents: write
  pull-requests: write
  issues: write
  actions: write

jobs:
  copilot-analysis:
    runs-on: ubuntu-latest
    name: Copilot Issue Analysis
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.COPILOT_TOKEN }}
        
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'
        cache: true
        
    - name: Determine target issues
      id: target-issues
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ inputs.issue_number }}" ]; then
          echo "target-issues=${{ inputs.issue_number }}" >> $GITHUB_OUTPUT
          echo "Processing manually triggered issue: ${{ inputs.issue_number }}"
        elif [ "${{ github.event_name }}" = "issues" ]; then
          echo "target-issues=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT
          echo "Processing issue from event: ${{ github.event.issue.number }}"
        else
          # Find issues that Copilot can handle
          echo "Finding issues for Copilot to process..."
          ISSUES=$(gh issue list --state open --label "copilot-assign" --json number,title,labels --jq '.[] | select(.labels[] | .name == "copilot-assign") | .number' | tr '\n' ' ')
          if [ -n "$ISSUES" ]; then
            echo "target-issues=$ISSUES" >> $GITHUB_OUTPUT
            echo "Found issues for Copilot: $ISSUES"
          else
            echo "target-issues=" >> $GITHUB_OUTPUT
            echo "No issues found for Copilot"
          fi
        fi
        
    - name: Analyze issues with Copilot
      if: steps.target-issues.outputs.target-issues != ''
      env:
        GH_TOKEN: ${{ secrets.COPILOT_TOKEN }}
      run: |
        TARGET_ISSUES="${{ steps.target-issues.outputs.target-issues }}"
        
        for ISSUE_NUMBER in $TARGET_ISSUES; do
          echo ""
          echo "🤖 Analyzing issue #$ISSUE_NUMBER with Copilot..."
          
          # Get issue details
          ISSUE_DATA=$(gh api "repos/${{ github.repository }}/issues/$ISSUE_NUMBER" --jq '{
            title: .title,
            body: .body,
            labels: [.labels[].name],
            assignees: [.assignees[].login],
            state: .state
          }')
          
          TITLE=$(echo "$ISSUE_DATA" | jq -r '.title')
          BODY=$(echo "$ISSUE_DATA" | jq -r '.body')
          LABELS=$(echo "$ISSUE_DATA" | jq -r '.labels[]' | tr '\n' ' ')
          
          echo "   Title: $TITLE"
          echo "   Labels: $LABELS"
          
          # Check if Copilot can handle this issue
          CAN_HANDLE=false
          REASON=""
          
          # Check for autonomy-specific patterns
          if echo "$TITLE $BODY" | grep -qE "(daemon_down|daemon_hung|crash_loop|system_degraded|performance_issue|memory_leak|ubus_error|uci_error)"; then
            CAN_HANDLE=true
            REASON="autonomy_system_issue"
          elif echo "$TITLE $BODY" | grep -qE "(notification_failure|webhook_error|mqtt_error)"; then
            CAN_HANDLE=true
            REASON="notification_issue"
          elif echo "$TITLE $BODY" | grep -qE "(starlink_api|cellular_monitoring|gps_integration)"; then
            CAN_HANDLE=true
            REASON="monitoring_issue"
          elif echo "$TITLE $BODY" | grep -qE "(build_error|compilation_error|test_failure)"; then
            CAN_HANDLE=true
            REASON="build_issue"
          fi
          
          if [ "$CAN_HANDLE" = "true" ]; then
            echo "   ✅ Copilot can handle this issue: $REASON"
            
            # Add Copilot processing label
            gh issue edit "$ISSUE_NUMBER" --add-label "copilot-processing"
            
            # Create branch for fix
            BRANCH_NAME="copilot-fix-issue-$ISSUE_NUMBER"
            git checkout -b "$BRANCH_NAME"
            
            # Generate fix using Copilot
            echo "   🔧 Generating fix..."
            ./scripts/copilot-generate-fix.sh "$ISSUE_NUMBER" "$TITLE" "$BODY"
            
            # Check if changes were made
            if [ -n "$(git status --porcelain)" ]; then
              echo "   📝 Changes generated, creating PR..."
              
              # Commit changes
              git config user.email "copilot@github.com"
              git config user.name "GitHub Copilot"
              git add -A
                             git commit -m "fix: $TITLE - Closes #$ISSUE_NUMBER - Generated by GitHub Copilot"

              # Push branch
              git push origin "$BRANCH_NAME"
              
                             # Create PR
               PR_BODY="## Fix for Issue #$ISSUE_NUMBER

**Issue**: $TITLE
**Type**: $REASON
**Generated by**: GitHub Copilot

### Changes Made
- Auto-generated fix based on issue analysis
- Applied best practices for autonomy system
- Includes necessary tests and documentation updates

### Testing
- [ ] Unit tests pass
- [ ] Integration tests pass
- [ ] Code quality checks pass
- [ ] Security scan passes

### Review
This PR was automatically generated by GitHub Copilot. Please review the changes and ensure they address the original issue correctly.

---
*Auto-generated by Copilot Autonomous Issue Resolution*"

               PR_URL=$(gh pr create \
                 --title "fix: $TITLE" \
                 --body "$PR_BODY" \
                 --label "copilot-generated,ready-for-review" \
                 --assignee "github-copilot")
              
              echo "   ✅ PR created: $PR_URL"
              
              # Update issue with PR link
              gh issue comment "$ISSUE_NUMBER" --body "🤖 **Copilot has generated a fix!**

I've analyzed this issue and created a pull request with an automated fix:

$PR_URL

The fix addresses the **$REASON** identified in your issue. Please review the changes and let me know if any adjustments are needed.

**Next Steps:**
1. Review the generated fix
2. Run tests to verify the solution
3. Approve and merge if satisfied
4. Close this issue once deployed

---
*This response was automatically generated by GitHub Copilot.*"
              
            else
              echo "   ⚠️ No changes generated for this issue"
              gh issue comment "$ISSUE_NUMBER" --body "🤖 **Copilot Analysis Complete**

I've analyzed this issue but couldn't generate an automated fix. This might be because:

- The issue requires manual investigation
- The problem is configuration-related rather than code-related
- Additional context is needed

**Recommendation:** Please provide more details or consider handling this issue manually.

---
*This response was automatically generated by GitHub Copilot.*"
            fi
            
            # Remove processing label
            gh issue edit "$ISSUE_NUMBER" --remove-label "copilot-processing"
            
          else
            echo "   ❌ Copilot cannot handle this issue"
            gh issue comment "$ISSUE_NUMBER" --body "🤖 **Copilot Analysis**

I've analyzed this issue but it doesn't match the patterns I can automatically fix. This issue may require:

- Manual investigation
- Human expertise
- Configuration changes
- Hardware-specific solutions

**Recommendation:** Please handle this issue manually or provide more specific details.

---
*This response was automatically generated by GitHub Copilot.*"
          fi
          
          sleep 2  # Rate limiting
        done
        
    - name: Create Analysis Report
      if: always()
      run: |
        echo "## 🤖 Copilot Analysis Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Issues Processed**: ${{ steps.target-issues.outputs.target-issues }}" >> $GITHUB_STEP_SUMMARY
        echo "**Analysis Complete**: ✅" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📊 **Check the issues for detailed Copilot responses**" >> $GITHUB_STEP_SUMMARY

  copilot-auto-merge:
    runs-on: ubuntu-latest
    name: Copilot Auto-Merge
    needs: copilot-analysis
    if: always()
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.COPILOT_TOKEN }}
        
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'
        cache: true
        
    - name: Find Copilot PRs ready for merge
      env:
        GH_TOKEN: ${{ secrets.COPILOT_TOKEN }}
      run: |
        echo "🔍 Finding Copilot PRs ready for auto-merge..."
        
        READY_PRS=$(gh pr list --state open --author app/copilot-swe-agent --label "ready-for-merge" --json number,title,labels,mergeable --jq '.[] | select(.mergeable == "MERGEABLE") | select(.labels[] | .name == "ready-for-merge") | .number' | tr '\n' ' ')
        
        if [ -n "$READY_PRS" ]; then
          echo "ready-prs=$READY_PRS" >> $GITHUB_OUTPUT
          echo "Found PRs ready for merge: $READY_PRS"
        else
          echo "ready-prs=" >> $GITHUB_OUTPUT
          echo "No PRs ready for merge"
        fi
        
    - name: Run validation tests on ready PRs
      if: steps.find-prs.outputs.ready-prs != ''
      env:
        GH_TOKEN: ${{ secrets.COPILOT_TOKEN }}
      run: |
        READY_PRS="${{ steps.find-prs.outputs.ready-prs }}"
        
        for PR_NUMBER in $READY_PRS; do
          echo ""
          echo "🧪 Running validation tests on PR #$PR_NUMBER..."
          
          # Checkout PR
          gh pr checkout "$PR_NUMBER"
          
          # Run tests
          echo "   Running unit tests..."
          go test ./pkg/... -v -race -timeout 5m
          
          echo "   Running integration tests..."
          go test ./test/integration/... -v -timeout 10m
          
          echo "   Running code quality checks..."
          golangci-lint run --timeout=5m
          
          echo "   Running security scan..."
          gosec ./...
          
          echo "   ✅ All validation tests passed for PR #$PR_NUMBER"
          
          # Add validation passed label
          gh pr edit "$PR_NUMBER" --add-label "validation-passed"
          
        done
        
    - name: Auto-merge validated PRs
      if: steps.find-prs.outputs.ready-prs != ''
      env:
        GH_TOKEN: ${{ secrets.COPILOT_TOKEN }}
      run: |
        READY_PRS="${{ steps.find-prs.outputs.ready-prs }}"
        
        for PR_NUMBER in $READY_PRS; do
          echo ""
          echo "🚀 Auto-merging PR #$PR_NUMBER..."
          
          # Check if PR has validation-passed label
          HAS_VALIDATION=$(gh pr view "$PR_NUMBER" --json labels --jq '.labels[] | select(.name == "validation-passed") | .name')
          
          if [ "$HAS_VALIDATION" = "validation-passed" ]; then
            echo "   ✅ PR has validation-passed label, proceeding with merge..."
            
            # Merge PR
            if gh pr merge "$PR_NUMBER" --auto --squash --delete-branch; then
              echo "   🎉 Successfully merged PR #$PR_NUMBER"
              
              # Close associated issue
              ISSUE_NUMBER=$(gh pr view "$PR_NUMBER" --json body --jq '.body' | grep -o '#[0-9]*' | head -1 | tr -d '#')
              if [ -n "$ISSUE_NUMBER" ]; then
                gh issue close "$ISSUE_NUMBER" --reason completed
                echo "   📝 Closed associated issue #$ISSUE_NUMBER"
              fi
              
            else
              echo "   ❌ Failed to merge PR #$PR_NUMBER"
            fi
          else
            echo "   ⚠️ PR #$PR_NUMBER doesn't have validation-passed label, skipping merge"
          fi
          
          sleep 2  # Rate limiting
        done
        
    - name: Create Auto-Merge Report
      if: always()
      run: |
        echo "## 🚀 Copilot Auto-Merge Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**PRs Processed**: ${{ steps.find-prs.outputs.ready-prs }}" >> $GITHUB_STEP_SUMMARY
        echo "**Auto-Merge Complete**: ✅" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📊 **Check the PRs for merge status**" >> $GITHUB_STEP_SUMMARY
