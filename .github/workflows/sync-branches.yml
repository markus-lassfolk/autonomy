name: Sync Branches

on:
  push:
    branches: [main, main-dev]
  workflow_dispatch:
    inputs:
      sync_direction:
        description: 'Direction to sync'
        required: false
        default: 'auto'
        type: choice
        options:
          - auto
          - main-to-dev
          - dev-to-main

permissions:
  contents: write
  pull-requests: write

jobs:
  sync-infrastructure:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && github.ref == 'refs/heads/main-dev')
    steps:
    - name: Checkout main-dev
      uses: actions/checkout@v4
      with:
        ref: main-dev
        token: ${{ secrets.AUTONOMY_GH_TOKEN }}

    - name: Check for infrastructure changes
      run: |
        echo "🔍 Checking for infrastructure changes in main-dev..."
        
        # Define infrastructure files
        INFRA_FILES=(
          ".github/workflows/"
          "docs/"
          "scripts/"
          "Makefile"
          "README.md"
          "LICENSE"
          ".gitignore"
          "go.mod"
          "go.sum"
        )
        
        # Check if any infrastructure files were changed
        CHANGED_FILES=$(git diff --name-only HEAD~1 || echo "")
        
        if [ -n "$CHANGED_FILES" ]; then
          echo "Changed files:"
          echo "$CHANGED_FILES"
          
          # Check if any infrastructure files were modified
          for file in "${INFRA_FILES[@]}"; do
            if echo "$CHANGED_FILES" | grep -q "^$file"; then
              echo "✅ Infrastructure file changed: $file"
              echo "infrastructure_changed=true" >> $GITHUB_ENV
              break
            fi
          done
        else
          echo "No changes detected"
        fi

    - name: Create PR to main
      if: env.infrastructure_changed == 'true'
      run: |
        echo "🔄 Creating PR to sync infrastructure changes to main..."
        
        # Configure git
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Create a new branch for the PR
        git checkout -b sync-infrastructure-$(date +%s)
        
        # Push the branch
        git push origin HEAD
        
        # Create PR using GitHub CLI
        gh pr create \
          --title "🔄 Sync Infrastructure Changes to Main" \
          --body "Automatically syncing infrastructure changes from main-dev to main" \
          --base main \
          --head $(git branch --show-current) \
          --label "sync" \
          --label "infrastructure"

  sync-project:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    steps:
    - name: Checkout main
      uses: actions/checkout@v4
      with:
        ref: main
        token: ${{ secrets.AUTONOMY_GH_TOKEN }}

    - name: Check for project changes
      run: |
        echo "🔍 Checking for project changes in main..."
        
        # Define project files
        PROJECT_FILES=(
          "pkg/"
          "cmd/"
          "test/"
          "configs/"
          "uci-schema/"
          "package/"
          "luci/"
          "vuci-app-autonomy/"
        )
        
        # Check if any project files were changed
        CHANGED_FILES=$(git diff --name-only HEAD~1 || echo "")
        
        if [ -n "$CHANGED_FILES" ]; then
          echo "Changed files:"
          echo "$CHANGED_FILES"
          
          # Check if any project files were modified
          for file in "${PROJECT_FILES[@]}"; do
            if echo "$CHANGED_FILES" | grep -q "^$file"; then
              echo "✅ Project file changed: $file"
              echo "project_changed=true" >> $GITHUB_ENV
              break
            fi
          done
        else
          echo "No changes detected"
        fi

    - name: Create PR to main-dev
      if: env.project_changed == 'true'
      run: |
        echo "🔄 Creating PR to sync project changes to main-dev..."
        
        # Configure git
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Create a new branch for the PR
        git checkout -b sync-project-$(date +%s)
        
        # Push the branch
        git push origin HEAD
        
        # Create PR using GitHub CLI
        gh pr create \
          --title "🔄 Sync Project Changes to Main-Dev" \
          --body "Automatically syncing project changes from main to main-dev" \
          --base main-dev \
          --head $(git branch --show-current) \
          --label "sync" \
          --label "project"

  auto-merge-sync:
    runs-on: ubuntu-latest
    needs: [sync-infrastructure, sync-project]
    if: always()
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.AUTONOMY_GH_TOKEN }}

    - name: Auto-merge sync PRs
      env:
        GH_TOKEN: ${{ secrets.AUTONOMY_GH_TOKEN }}
      run: |
        echo "🤖 Attempting to auto-merge sync PRs..."
        
        # Get PRs with sync label
        SYNC_PRS=$(gh pr list --label "sync" --json number,title,mergeable --jq '.[] | select(.mergeable == "MERGEABLE") | .number')
        
        if [ -n "$SYNC_PRS" ]; then
          echo "Found mergeable sync PRs: $SYNC_PRS"
          
          for pr in $SYNC_PRS; do
            echo "Merging PR #$pr..."
            gh pr merge $pr --auto --delete-branch || echo "Failed to merge PR #$pr"
          done
        else
          echo "No mergeable sync PRs found"
        fi
