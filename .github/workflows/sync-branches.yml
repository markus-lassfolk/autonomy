name: Sync Branches

on:
  push:
    branches: [main, main-dev]
  workflow_dispatch:
    inputs:
      sync_direction:
        description: 'Direction to sync'
        required: false
        default: 'auto'
        type: choice
        options:
          - auto
          - main-to-dev
          - dev-to-main

permissions:
  contents: write
  pull-requests: write

jobs:
  sync-infrastructure:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main-dev' || (github.event_name == 'workflow_dispatch' && github.event.inputs.sync_direction == 'dev-to-main')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Check for infrastructure changes
      id: check-changes
      run: |
        # Check if infrastructure files changed
        INFRA_CHANGED=false
        
        # List of infrastructure files/directories
        INFRA_FILES=(
          ".github/"
          "scripts/"
          "docs/"
          "configs/"
          "README.md"
          "ARCHITECTURE.md"
          "ROADMAP.md"
          "STATUS.md"
          "PROJECT_INSTRUCTION.md"
          "AUTONOMOUS_WORKFLOWS_IMPLEMENTATION.md"
          "AUTONOMOUS_WORKFLOWS_COMPLETE.md"
          "github-todo.md"
          "ENHANCED_MONITORING_PWA_SUMMARY.md"
          "RUTOS_INTEGRATION_SUMMARY.md"
          "IMPLEMENTATION_SUMMARY.md"
          "azure/"
          "luci/"
          "package/"
          "uci-schema/"
          "vuci-app-autonomy/"
          ".gitignore"
          ".cursorinstructions"
          ".cursorrules"
        )
        
        # Check for changes in infrastructure files
        for file in "${INFRA_FILES[@]}"; do
          if git diff --name-only HEAD~1 | grep -q "^$file"; then
            INFRA_CHANGED=true
            echo "Found changes in: $file"
          fi
        done
        
        echo "infra-changed=$INFRA_CHANGED" >> $GITHUB_OUTPUT
        
        if [ "$INFRA_CHANGED" = "true" ]; then
          echo "‚úÖ Infrastructure files changed, will sync to main branch"
        else
          echo "‚ÑπÔ∏è No infrastructure files changed, skipping sync"
        fi
        
    - name: Sync infrastructure files to main
      if: steps.check-changes.outputs.infra-changed == 'true'
      run: |
        echo "üîÑ Syncing infrastructure changes to main branch..."
        
        # Create PR to main branch
        gh pr create \
          --title "üîÑ Sync infrastructure changes from main-dev" \
          --body "This PR syncs infrastructure changes from the main-dev branch to main.
          
          **Changes:**
          - Infrastructure files updated
          - Documentation updates
          - CI/CD configuration changes
          
          **Review required:** Please review and merge these infrastructure changes.
          
          **Auto-generated by branch sync workflow**" \
          --base main \
          --head main-dev \
          --label "sync" \
          --label "infrastructure"
          
        echo "‚úÖ Created PR to sync infrastructure changes to main"

  sync-project:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.sync_direction == 'main-to-dev')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Check for project changes
      id: check-changes
      run: |
        # Check if project files changed
        PROJECT_CHANGED=false
        
        # List of project files/directories
        PROJECT_FILES=(
          "pkg/"
          "cmd/"
          "test/"
          "go.mod"
          "go.sum"
          "Makefile"
          "TODO.md"
          "etc/"
        )
        
        # Check for changes in project files
        for file in "${PROJECT_FILES[@]}"; do
          if git diff --name-only HEAD~1 | grep -q "^$file"; then
            PROJECT_CHANGED=true
            echo "Found changes in: $file"
          fi
        done
        
        echo "project-changed=$PROJECT_CHANGED" >> $GITHUB_OUTPUT
        
        if [ "$PROJECT_CHANGED" = "true" ]; then
          echo "‚úÖ Project files changed, will sync to main-dev branch"
        else
          echo "‚ÑπÔ∏è No project files changed, skipping sync"
        fi
        
    - name: Sync project files to main-dev
      if: steps.check-changes.outputs.project-changed == 'true'
      run: |
        echo "üîÑ Syncing project changes to main-dev branch..."
        
        # Create PR to main-dev branch
        gh pr create \
          --title "üîÑ Sync project changes from main" \
          --body "This PR syncs project changes from the main branch to main-dev.
          
          **Changes:**
          - Project source code updates
          - Dependencies updated
          - Build system changes
          
          **Review required:** Please review and merge these project changes.
          
          **Auto-generated by branch sync workflow**" \
          --base main-dev \
          --head main \
          --label "sync" \
          --label "project"
          
        echo "‚úÖ Created PR to sync project changes to main-dev"

  auto-merge-sync:
    runs-on: ubuntu-latest
    needs: [sync-infrastructure, sync-project]
    if: always() && (needs.sync-infrastructure.result == 'success' || needs.sync-project.result == 'success')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Auto-merge sync PRs
      run: |
        echo "ü§ñ Checking for sync PRs to auto-merge..."
        
        # Find sync PRs that are ready to merge
        SYNC_PRS=$(gh pr list --state open --label "sync" --json number,title,mergeable,labels --jq '.[] | select(.mergeable == "MERGEABLE") | .number')
        
        if [ -n "$SYNC_PRS" ]; then
          echo "Found sync PRs ready to merge: $SYNC_PRS"
          
          for PR_NUMBER in $SYNC_PRS; do
            echo "Auto-merging PR #$PR_NUMBER..."
            
            # Check if PR has required labels
            HAS_SYNC_LABEL=$(gh pr view "$PR_NUMBER" --json labels --jq '.labels[] | select(.name == "sync") | .name')
            
            if [ "$HAS_SYNC_LABEL" = "sync" ]; then
              # Auto-merge the PR
              gh pr merge "$PR_NUMBER" --auto --merge
              echo "‚úÖ Auto-merged PR #$PR_NUMBER"
            else
              echo "‚ö†Ô∏è PR #$PR_NUMBER doesn't have sync label, skipping auto-merge"
            fi
          done
        else
          echo "‚ÑπÔ∏è No sync PRs ready for auto-merge"
        fi
