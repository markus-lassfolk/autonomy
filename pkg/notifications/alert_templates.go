package notifications

// No imports needed for this file

// initializeDefaultTemplates sets up default alert templates for different failure types
func (cam *ContextualAlertManager) initializeDefaultTemplates() {
	cam.alertTemplates[AlertFailover] = &AlertTemplate{
		Type:          AlertFailover,
		TitleTemplate: "üîÑ Failover: {{.from_interface}} ‚Üí {{.to_interface}}",
		MessageTemplate: `Network failover executed from {{.from_interface}} to {{.to_interface}}.

üìä Performance Impact:
‚Ä¢ Previous latency: {{.metrics.latency}}ms
‚Ä¢ Packet loss: {{.metrics.loss}}%
‚Ä¢ Reason: {{.reason}}

üåç Location: {{.location.latitude}}, {{.location.longitude}} (¬±{{.location.accuracy}}m)
‚è∞ Time: {{.timestamp}}`,
		Priority:        PriorityHigh,
		RequiredContext: []string{"from_interface", "to_interface", "reason"},
		Enrichers: []ContextEnricher{
			{
				Name:     "Weather Impact",
				Type:     "weather",
				Template: "Weather conditions: {{.weather.condition}}, visibility {{.weather.visibility}}km",
				Priority: 2,
			},
			{
				Name:     "Movement Status",
				Type:     "location",
				Template: "Device movement: {{.movement.speed}}m/s, stationary for {{.movement.stationary_time}}",
				Priority: 1,
			},
		},
		Actions: []SuggestedAction{
			{
				Title:       "Monitor new interface",
				Description: "Keep monitoring the new primary interface for stability",
				Command:     "ubus call autonomy metrics '{\"interface\":\"{{.to_interface}}\"}'",
				Priority:    1,
			},
			{
				Title:       "Check backup interfaces",
				Description: "Verify backup interfaces are ready for next failover",
				Command:     "ubus call autonomy members",
				Priority:    2,
			},
		},
	}

	cam.alertTemplates[AlertFailback] = &AlertTemplate{
		Type:          AlertFailback,
		TitleTemplate: "‚Ü©Ô∏è Failback: {{.to_interface}} restored",
		MessageTemplate: `Network failback completed - {{.to_interface}} is now primary.

üìà Recovery Metrics:
‚Ä¢ Current latency: {{.metrics.latency}}ms
‚Ä¢ Packet loss: {{.metrics.loss}}%
‚Ä¢ Downtime: {{.downtime}}

üåç Location: {{.location.latitude}}, {{.location.longitude}}
‚è∞ Time: {{.timestamp}}`,
		Priority:        PriorityNormal,
		RequiredContext: []string{"to_interface", "downtime"},
		Actions: []SuggestedAction{
			{
				Title:       "Verify stability",
				Description: "Monitor the restored interface for 10 minutes to ensure stability",
				Priority:    1,
			},
		},
	}

	cam.alertTemplates[AlertInterfaceDown] = &AlertTemplate{
		Type:          AlertInterfaceDown,
		TitleTemplate: "üî¥ Interface Down: {{.interface}}",
		MessageTemplate: `Interface {{.interface}} has gone down.

üìâ Last Known Metrics:
‚Ä¢ Latency: {{.metrics.latency}}ms
‚Ä¢ Loss: {{.metrics.loss}}%
‚Ä¢ Signal: {{.signal_strength}}

üîç Failure Analysis:
‚Ä¢ Duration: {{.duration}}
‚Ä¢ Cause: {{.cause}}
‚Ä¢ Impact: {{.impact}}

üåç Location: {{.location.latitude}}, {{.location.longitude}}
‚è∞ Time: {{.timestamp}}`,
		Priority:        PriorityHigh,
		RequiredContext: []string{"interface"},
		Enrichers: []ContextEnricher{
			{
				Name:     "Provider Status",
				Type:     "system",
				Template: "Provider: {{.provider}}, Account status: {{.account_status}}",
				Priority: 1,
			},
			{
				Name:     "Historical Pattern",
				Type:     "historical",
				Template: "Similar failures: {{.historical.frequency}}/day, pattern: {{.historical.pattern_type}}",
				Priority: 2,
			},
		},
		Actions: []SuggestedAction{
			{
				Title:       "Check physical connections",
				Description: "Verify cables and antenna connections are secure",
				Priority:    1,
			},
			{
				Title:       "Restart interface",
				Description: "Attempt to restart the failed interface",
				Command:     "ifdown {{.interface}} && sleep 5 && ifup {{.interface}}",
				Priority:    2,
			},
		},
	}

	cam.alertTemplates[AlertInterfaceUp] = &AlertTemplate{
		Type:          AlertInterfaceUp,
		TitleTemplate: "üü¢ Interface Up: {{.interface}}",
		MessageTemplate: `Interface {{.interface}} is now operational.

üìä Current Metrics:
‚Ä¢ Latency: {{.metrics.latency}}ms
‚Ä¢ Loss: {{.metrics.loss}}%
‚Ä¢ Signal: {{.signal_strength}}

‚è±Ô∏è Recovery Time: {{.recovery_time}}
üåç Location: {{.location.latitude}}, {{.location.longitude}}
‚è∞ Time: {{.timestamp}}`,
		Priority:        PriorityNormal,
		RequiredContext: []string{"interface"},
		Actions: []SuggestedAction{
			{
				Title:       "Update routing weights",
				Description: "Consider updating interface priorities based on performance",
				Command:     "ubus call autonomy config.set '{\"interface_priority\":{{.priority}}}'",
				Priority:    2,
			},
		},
	}

	cam.alertTemplates[AlertPredictive] = &AlertTemplate{
		Type:          AlertPredictive,
		TitleTemplate: "‚ö†Ô∏è Predictive Alert: {{.interface}} degrading",
		MessageTemplate: `Predictive analysis indicates {{.interface}} may fail soon.

üìâ Degradation Indicators:
‚Ä¢ {{.prediction_reason}}
‚Ä¢ Confidence: {{.confidence}}%
‚Ä¢ Estimated time to failure: {{.time_to_failure}}

üìä Current Metrics:
‚Ä¢ Latency: {{.metrics.latency}}ms (trend: {{.latency_trend}})
‚Ä¢ Loss: {{.metrics.loss}}% (trend: {{.loss_trend}})

üéØ Recommended Action: {{.recommendation}}

üåç Location: {{.location.latitude}}, {{.location.longitude}}
‚è∞ Time: {{.timestamp}}`,
		Priority:        PriorityHigh,
		RequiredContext: []string{"interface", "prediction_reason", "confidence"},
		Enrichers: []ContextEnricher{
			{
				Name:     "Trend Analysis",
				Type:     "metrics",
				Template: "Performance trend over last hour: {{.trend_analysis}}",
				Priority: 1,
			},
		},
		Actions: []SuggestedAction{
			{
				Title:       "Prepare backup interface",
				Description: "Ensure backup interfaces are ready for immediate failover",
				Command:     "ubus call autonomy action '{\"type\":\"prepare_backup\"}'",
				Priority:    1,
			},
			{
				Title:       "Increase monitoring frequency",
				Description: "Switch to high-frequency monitoring for early detection",
				Priority:    2,
			},
		},
	}

	cam.alertTemplates[AlertObstruction] = &AlertTemplate{
		Type:          AlertObstruction,
		TitleTemplate: "üõ∞Ô∏è Starlink Obstruction: {{.severity}} level",
		MessageTemplate: `Starlink obstruction detected affecting connectivity.

üîç Obstruction Details:
‚Ä¢ Severity: {{.severity}}
‚Ä¢ Fraction obstructed: {{.fraction_obstructed}}%
‚Ä¢ Valid patches: {{.valid_patches}}%
‚Ä¢ Time obstructed: {{.time_obstructed}}s

üì° Signal Impact:
‚Ä¢ SNR: {{.snr}}dB
‚Ä¢ Downlink throughput: {{.downlink_throughput}}Mbps

üåç Location: {{.location.latitude}}, {{.location.longitude}}
‚è∞ Time: {{.timestamp}}`,
		Priority:        PriorityNormal,
		RequiredContext: []string{"severity", "fraction_obstructed"},
		Enrichers: []ContextEnricher{
			{
				Name: "Movement Recommendation",
				Type: "location",
				Conditions: []EnricherCondition{
					{Field: "is_stationary", Operator: "equals", Value: true},
				},
				Template: "Device is stationary - consider repositioning for better sky view",
				Priority: 1,
			},
		},
		Actions: []SuggestedAction{
			{
				Title:       "Clear obstruction map",
				Description: "Reset Starlink obstruction map to refresh satellite tracking",
				Command:     "ubus call starlink clear_obstruction_map",
				Priority:    1,
			},
			{
				Title:       "Check physical obstructions",
				Description: "Look for trees, buildings, or other objects blocking satellite view",
				Priority:    2,
			},
		},
	}

	cam.alertTemplates[AlertThermal] = &AlertTemplate{
		Type:          AlertThermal,
		TitleTemplate: "üå°Ô∏è Thermal Alert: {{.component}} overheating",
		MessageTemplate: `Thermal management alert for {{.component}}.

üå°Ô∏è Temperature Status:
‚Ä¢ Current: {{.temperature}}¬∞C
‚Ä¢ Threshold: {{.threshold}}¬∞C
‚Ä¢ Trend: {{.trend}}

‚ö° System Impact:
‚Ä¢ CPU usage: {{.system.cpu}}%
‚Ä¢ Performance throttling: {{.throttling_active}}
‚Ä¢ Estimated shutdown time: {{.shutdown_estimate}}

üåç Location: {{.location.latitude}}, {{.location.longitude}}
‚è∞ Time: {{.timestamp}}`,
		Priority:        PriorityHigh,
		RequiredContext: []string{"component", "temperature", "threshold"},
		Enrichers: []ContextEnricher{
			{
				Name:     "Environmental Factors",
				Type:     "weather",
				Template: "Ambient temperature: {{.weather.temperature}}¬∞C, humidity: {{.weather.humidity}}%",
				Priority: 1,
			},
		},
		Actions: []SuggestedAction{
			{
				Title:       "Check cooling system",
				Description: "Verify fans are working and air vents are not blocked",
				Priority:    1,
			},
			{
				Title:       "Reduce system load",
				Description: "Consider reducing non-essential services to lower heat generation",
				Priority:    2,
			},
		},
	}

	cam.alertTemplates[AlertDataLimit] = &AlertTemplate{
		Type:          AlertDataLimit,
		TitleTemplate: "üìä Data Limit Alert: {{.usage_percent}}% used",
		MessageTemplate: `Data usage approaching limit on {{.interface}}.

üìà Usage Statistics:
‚Ä¢ Used: {{.data_used}}GB / {{.data_limit}}GB ({{.usage_percent}}%)
‚Ä¢ Daily average: {{.daily_average}}GB
‚Ä¢ Days remaining: {{.days_remaining}}
‚Ä¢ Projected overage: {{.projected_overage}}GB

üí∞ Cost Impact:
‚Ä¢ Overage rate: {{.overage_rate}}/GB
‚Ä¢ Estimated additional cost: {{.estimated_cost}}

üåç Location: {{.location.latitude}}, {{.location.longitude}}
‚è∞ Time: {{.timestamp}}`,
		Priority:        PriorityNormal,
		RequiredContext: []string{"interface", "usage_percent", "data_used", "data_limit"},
		Actions: []SuggestedAction{
			{
				Title:       "Enable data saving mode",
				Description: "Activate data conservation features to reduce usage",
				Command:     "uci set autonomy.general.data_saving=1 && uci commit",
				Priority:    1,
			},
			{
				Title:       "Review data usage",
				Description: "Check which applications are consuming the most data",
				Priority:    2,
			},
		},
	}

	cam.alertTemplates[AlertSystemHealth] = &AlertTemplate{
		Type:          AlertSystemHealth,
		TitleTemplate: "üè• System Health Alert: {{.component}}",
		MessageTemplate: `System health issue detected in {{.component}}.

üîç Health Status:
‚Ä¢ Component: {{.component}}
‚Ä¢ Status: {{.status}}
‚Ä¢ Severity: {{.severity}}
‚Ä¢ Description: {{.description}}

üìä System Metrics:
‚Ä¢ CPU: {{.system.cpu}}%
‚Ä¢ Memory: {{.system.memory}}%
‚Ä¢ Temperature: {{.system.temperature}}¬∞C
‚Ä¢ Uptime: {{.uptime}}

üåç Location: {{.location.latitude}}, {{.location.longitude}}
‚è∞ Time: {{.timestamp}}`,
		Priority:        PriorityHigh,
		RequiredContext: []string{"component", "status", "severity"},
		Actions: []SuggestedAction{
			{
				Title:       "Run system diagnostics",
				Description: "Execute comprehensive system health check",
				Command:     "ubus call autonomy system_diagnostics",
				Priority:    1,
			},
			{
				Title:       "Check system logs",
				Description: "Review system logs for additional error details",
				Command:     "logread | tail -50",
				Priority:    2,
			},
		},
	}

	cam.alertTemplates[AlertConnectivityIssue] = &AlertTemplate{
		Type:          AlertConnectivityIssue,
		TitleTemplate: "üåê Connectivity Issue: {{.interface}}",
		MessageTemplate: `Connectivity problems detected on {{.interface}}.

üì° Connection Status:
‚Ä¢ Interface: {{.interface}}
‚Ä¢ Issue type: {{.issue_type}}
‚Ä¢ Severity: {{.severity}}
‚Ä¢ Duration: {{.duration}}

üìä Performance Impact:
‚Ä¢ Latency: {{.metrics.latency}}ms (normal: {{.baseline_latency}}ms)
‚Ä¢ Packet loss: {{.metrics.loss}}% (normal: {{.baseline_loss}}%)
‚Ä¢ Throughput: {{.throughput}}Mbps (normal: {{.baseline_throughput}}Mbps)

üîç Troubleshooting:
‚Ä¢ DNS resolution: {{.dns_status}}
‚Ä¢ Gateway reachability: {{.gateway_status}}
‚Ä¢ External connectivity: {{.external_status}}

üåç Location: {{.location.latitude}}, {{.location.longitude}}
‚è∞ Time: {{.timestamp}}`,
		Priority:        PriorityNormal,
		RequiredContext: []string{"interface", "issue_type", "severity"},
		Actions: []SuggestedAction{
			{
				Title:       "Run connectivity test",
				Description: "Execute comprehensive connectivity diagnostics",
				Command:     "ubus call autonomy connectivity_test '{\"interface\":\"{{.interface}}\"}'",
				Priority:    1,
			},
			{
				Title:       "Reset network interface",
				Description: "Restart the network interface to resolve temporary issues",
				Command:     "ifdown {{.interface}} && sleep 5 && ifup {{.interface}}",
				Priority:    2,
			},
		},
	}
}

// initializeDefaultContextRules sets up default context rules for intelligent behavior
func (cam *ContextualAlertManager) initializeDefaultContextRules() {
	cam.contextRules = []ContextRule{
		{
			ID:   "quiet_hours_low_priority",
			Name: "Suppress low priority alerts during quiet hours",
			Conditions: []RuleCondition{
				{Type: "time", Field: "hour", Operator: "gte", Value: 22},
				{Type: "time", Field: "hour", Operator: "lt", Value: 8},
			},
			Actions: []ContextAction{
				{Type: "modify_priority", Parameters: map[string]interface{}{"priority": PriorityLowest}},
			},
			Priority: 1,
			Enabled:  true,
		},
		{
			ID:   "high_temperature_escalation",
			Name: "Escalate thermal alerts when temperature is critical",
			Conditions: []RuleCondition{
				{Type: "alert_type", Field: "", Operator: "equals", Value: "thermal"},
				{Type: "system", Field: "temperature", Operator: "gt", Value: 80.0},
			},
			Actions: []ContextAction{
				{Type: "modify_priority", Parameters: map[string]interface{}{"priority": PriorityEmergency}},
				{Type: "add_context", Parameters: map[string]interface{}{"key": "critical_temperature", "value": true}},
			},
			Priority: 1,
			Enabled:  true,
		},
		{
			ID:   "mobile_movement_context",
			Name: "Add movement context for mobile deployments",
			Conditions: []RuleCondition{
				{Type: "location", Field: "is_stationary", Operator: "equals", Value: false},
			},
			Actions: []ContextAction{
				{Type: "add_context", Parameters: map[string]interface{}{"key": "mobile_deployment", "value": true}},
			},
			Priority: 2,
			Enabled:  true,
		},
		{
			ID:   "weekend_low_priority_suppression",
			Name: "Reduce priority for non-critical alerts on weekends",
			Conditions: []RuleCondition{
				{Type: "time", Field: "weekday", Operator: "equals", Value: "Saturday"},
			},
			Actions: []ContextAction{
				{Type: "modify_priority", Parameters: map[string]interface{}{"priority": PriorityLow}},
			},
			Priority: 2,
			Enabled:  false, // Disabled by default
		},
		{
			ID:   "high_loss_emergency_escalation",
			Name: "Escalate alerts when packet loss is extremely high",
			Conditions: []RuleCondition{
				{Type: "metrics", Field: "loss_percent", Operator: "gt", Value: 50.0},
			},
			Actions: []ContextAction{
				{Type: "modify_priority", Parameters: map[string]interface{}{"priority": PriorityEmergency}},
				{Type: "add_context", Parameters: map[string]interface{}{"key": "critical_loss", "value": true}},
			},
			Priority: 1,
			Enabled:  true,
		},
		{
			ID:   "maintenance_mode_suppression",
			Name: "Suppress non-emergency alerts during maintenance",
			Conditions: []RuleCondition{
				{Type: "system", Field: "in_maintenance", Operator: "equals", Value: true},
			},
			Actions: []ContextAction{
				{Type: "modify_priority", Parameters: map[string]interface{}{"priority": PriorityLowest}},
				{Type: "add_context", Parameters: map[string]interface{}{"key": "maintenance_active", "value": true}},
			},
			Priority: 1,
			Enabled:  true,
		},
	}
}
