#!/bin/sh

# Enhanced autonomy Watchdog - Comprehensive System Health Monitoring
# Ash-compatible version with all discovered issues and fixes

# File paths
HB=/tmp/autonomyd.health
RESTARTS=/tmp/autonomyd.restarts
DIAG_DIR=/tmp/autonomy_diagnostics

# Default values
HEARTBEAT_STALE_SEC=60
CRASH_LOOP_THRESHOLD=3
CRASH_LOOP_WINDOW_SEC=600
COOLDOWN_MINUTES=30
SLOW_UBUS_MS=1500
GPS_TIMEOUT=10
STARLINK_TIMEOUT=15

# Logging function
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') starwatch: $*" | logger -t starwatch
}

# Create diagnostic bundle
create_diagnostic_bundle() {
    local timestamp=$(date +%Y%m%d_%H%M%S)
    local bundle_file="$DIAG_DIR/starwatch_diagnostics_$timestamp.tar.gz"
    
    mkdir -p "$DIAG_DIR"
    
    # Collect system information
    {
        echo "=== System Information ==="
        uname -a
        echo
        echo "=== Process List ==="
        ps aux
        echo
        echo "=== Memory Usage ==="
        free -h
        echo
        echo "=== Disk Usage ==="
        df -h
        echo
        echo "=== Network Interfaces ==="
        ip addr show
        echo
        echo "=== ubus Services ==="
        ubus list
        echo
        echo "=== mwan3 Status ==="
        mwan3 status
        echo
        echo "=== Recent Logs ==="
        tail -100 /tmp/autonomyd.log 2>/dev/null || echo "No autonomyd logs"
        echo
        echo "=== UCI Configuration ==="
        uci show autonomy 2>/dev/null || echo "No autonomy UCI config"
    } > "$DIAG_DIR/system_info_$timestamp.txt"
    
    # Create bundle
    tar -czf "$bundle_file" -C "$DIAG_DIR" "system_info_$timestamp.txt" 2>/dev/null || true
    
    # Cleanup old bundles (keep last 7 days)
    find "$DIAG_DIR" -name "starwatch_diagnostics_*.tar.gz" -mtime +7 -delete 2>/dev/null || true
    
    echo "$bundle_file"
}

# Test ubus connectivity
test_ubus() {
    timeout 3 ubus -S call system board '{}' >/dev/null 2>&1
    return $?
}

# Test ubus latency
test_ubus_latency() {
    local start_time=$(date +%s%3N 2>/dev/null || date +%s000)
    if timeout 3 ubus -S call system board '{}' >/dev/null 2>&1; then
        local end_time=$(date +%s%3N 2>/dev/null || date +%s000)
        echo $((end_time - start_time))
    else
        echo "9999"
    fi
}

# Test GPS system
test_gps_system() {
    local gps_ok=true
    local issues=""
    
    # Test gpsctl
    if ! timeout $GPS_TIMEOUT gpsctl status >/dev/null 2>&1; then
        gps_ok=false
        issues="$issues gpsctl_failed"
    fi
    
    # Test GPS ubus services
    if ! timeout 3 ubus call gpsctl status >/dev/null 2>&1; then
        gps_ok=false
        issues="$issues gps_ubus_failed"
    fi
    
    # Test gpsd process
    if ! ps | grep -q gpsd; then
        gps_ok=false
        issues="$issues gpsd_not_running"
    fi
    
    # Test GPS devices
    if [ ! -e /dev/ttyUSB1 ] && [ ! -e /dev/ttyUSB2 ]; then
        gps_ok=false
        issues="$issues no_gps_devices"
    fi
    
    if [ "$gps_ok" = "true" ]; then
        echo "ok"
    else
        echo "failed:$issues"
    fi
}

# Test Starlink connectivity
test_starlink() {
    local starlink_ok=true
    local issues=""
    
    # Test basic connectivity to Starlink dish
    if ! ping -c 1 -W 3 192.168.100.1 >/dev/null 2>&1; then
        starlink_ok=false
        issues="$issues ping_failed"
    fi
    
    # Test Starlink gRPC port
    if ! timeout 3 nc -z 192.168.100.1 9200 2>/dev/null; then
        starlink_ok=false
        issues="$issues grpc_port_failed"
    fi
    
    if [ "$starlink_ok" = "true" ]; then
        echo "ok"
    else
        echo "failed:$issues"
    fi
}

# Test mwan3 functionality
test_mwan3() {
    local mwan3_ok=true
    local issues=""
    
    # Test mwan3 ubus service
    if ! timeout 3 ubus call mwan3 status >/dev/null 2>&1; then
        mwan3_ok=false
        issues="$issues mwan3_ubus_failed"
    fi
    
    # Test mwan3 interfaces
    local interface_count=$(ubus call mwan3 status 2>/dev/null | grep -c "interface" || echo "0")
    if [ "$interface_count" -eq 0 ]; then
        mwan3_ok=false
        issues="$issues no_mwan3_interfaces"
    fi
    
    if [ "$mwan3_ok" = "true" ]; then
        echo "ok"
    else
        echo "failed:$issues"
    fi
}

# Check if daemon is healthy
check_daemon_health() {
    local daemon_ok=true
    local issues=""
    
    # Check if process exists
    if ! pidof autonomyd >/dev/null 2>&1; then
        daemon_ok=false
        issues="$issues process_not_found"
    fi
    
    # Check heartbeat file
    if [ ! -f "$HB" ]; then
        daemon_ok=false
        issues="$issues no_heartbeat_file"
    else
        # Check heartbeat age
        local heartbeat_age=$(( $(date +%s) - $(date -r "$HB" +%s 2>/dev/null || echo 0) ))
        if [ $heartbeat_age -gt $HEARTBEAT_STALE_SEC ]; then
            daemon_ok=false
            issues="$issues stale_heartbeat"
        fi
    fi
    
    # Check daemon ubus service
    if ! timeout 3 ubus call autonomy status >/dev/null 2>&1; then
        daemon_ok=false
        issues="$issues no_ubus_service"
    fi
    
    if [ "$daemon_ok" = "true" ]; then
        echo "ok"
    else
        echo "failed:$issues"
    fi
}

# Check crash loop
check_crash_loop() {
    if [ ! -f "$RESTARTS" ]; then
        echo "false"
        return
    fi
    
    # Count restarts in the last window
    local now=$(date +%s)
    local recent_restarts=0
    
    while IFS= read -r timestamp; do
        if [ $((now - timestamp)) -le $CRASH_LOOP_WINDOW_SEC ]; then
            recent_restarts=$((recent_restarts + 1))
        fi
    done < "$RESTARTS"
    
    if [ $recent_restarts -ge $CRASH_LOOP_THRESHOLD ]; then
        log "Crash loop detected: $recent_restarts restarts in ${CRASH_LOOP_WINDOW_SEC}s"
        echo "true"
    else
        echo "false"
    fi
}

# Record restart
record_restart() {
    echo "$(date +%s)" >> "$RESTARTS"
    
    # Clean old entries
    local now=$(date +%s)
    local temp_file=$(mktemp)
    while IFS= read -r timestamp; do
        if [ $((now - timestamp)) -le $CRASH_LOOP_WINDOW_SEC ]; then
            echo "$timestamp" >> "$temp_file"
        fi
    done < "$RESTARTS"
    mv "$temp_file" "$RESTARTS" 2>/dev/null || true
}

# Fix GPS system
fix_gps_system() {
    log "Attempting to fix GPS system"
    
    # Restart gpsd
    /etc/init.d/gpsd restart 2>/dev/null || true
    
    # Wait for gpsd to start
    sleep 5
    
    # Test GPS devices
    if [ -e /dev/ttyUSB1 ]; then
        log "GPS device /dev/ttyUSB1 found"
    fi
    if [ -e /dev/ttyUSB2 ]; then
        log "GPS device /dev/ttyUSB2 found"
    fi
    
    # Test gpsctl again
    if timeout $GPS_TIMEOUT gpsctl status >/dev/null 2>&1; then
        log "GPS system fixed successfully"
        return 0
    else
        log "GPS system still not working after restart"
        return 1
    fi
}

# Fix Starlink connectivity
fix_starlink() {
    log "Attempting to fix Starlink connectivity"
    
    # Restart network interface
    /etc/init.d/network restart 2>/dev/null || true
    
    # Wait for network to stabilize
    sleep 10
    
    # Test connectivity again
    if ping -c 1 -W 3 192.168.100.1 >/dev/null 2>&1; then
        log "Starlink connectivity restored"
        return 0
    else
        log "Starlink connectivity still not working"
        return 1
    fi
}

# Fix mwan3
fix_mwan3() {
    log "Attempting to fix mwan3"
    
    # Restart mwan3
    /etc/init.d/mwan3 restart 2>/dev/null || true
    
    # Wait for mwan3 to stabilize
    sleep 5
    
    # Test mwan3 again
    if timeout 3 ubus call mwan3 status >/dev/null 2>&1; then
        log "mwan3 fixed successfully"
        return 0
    else
        log "mwan3 still not working after restart"
        return 1
    fi
}

# Main health check function
main_health_check() {
    log "Starting comprehensive health check"
    
    # Get system metrics
    local ubus_latency=$(test_ubus_latency)
    
    # Check all systems
    local daemon_health=$(check_daemon_health)
    local crash_loop=$(check_crash_loop)
    local gps_health=$(test_gps_system)
    local starlink_health=$(test_starlink)
    local mwan3_health=$(test_mwan3)
    local ubus_health=$(test_ubus && echo "ok" || echo "failed")
    
    # Log health status
    log "Health status - Daemon: $daemon_health, GPS: $gps_health, Starlink: $starlink_health, mwan3: $mwan3_health, ubus: $ubus_health, latency: ${ubus_latency}ms"
    
    # Fix ubus/rpcd issues first (most critical)
    if [ "$ubus_health" != "ok" ]; then
        log "ubus/rpcd not responding - attempting restart"
        /etc/init.d/ubus restart 2>/dev/null || true
        /etc/init.d/rpcd restart 2>/dev/null || true
        log "ubus/rpcd restart completed"
        
        # Wait and test again
        sleep 5
        if test_ubus; then
            log "ubus is now responding after restart"
        else
            log "ubus still not responding after restart"
        fi
    elif [ $ubus_latency -gt $SLOW_UBUS_MS ]; then
        log "Slow ubus response: ${ubus_latency}ms"
    fi
    
    # Fix daemon health issues
    if [ "$daemon_health" != "ok" ]; then
        log "Daemon health check failed: $daemon_health"
        
        # Check if we should hold down due to crash loop
        if [ "$crash_loop" = "true" ]; then
            log "Crash loop detected - engaging hold-down for ${COOLDOWN_MINUTES} minutes"
            
            # Stop daemon for cooldown period
            /etc/init.d/autonomy stop 2>/dev/null || true
            sleep $((COOLDOWN_MINUTES * 60))
        fi
        
        # Restart daemon
        /etc/init.d/autonomy restart 2>/dev/null || true
        record_restart
    fi
    
    # Fix GPS system
    if [ "$gps_health" != "ok" ]; then
        log "GPS system issues detected: $gps_health"
        fix_gps_system
    fi
    
    # Fix Starlink connectivity
    if [ "$starlink_health" != "ok" ]; then
        log "Starlink connectivity issues detected: $starlink_health"
        fix_starlink
    fi
    
    # Fix mwan3
    if [ "$mwan3_health" != "ok" ]; then
        log "mwan3 issues detected: $mwan3_health"
        fix_mwan3
    fi
    
    # Create diagnostic bundle if multiple issues
    local issue_count=0
    [ "$daemon_health" != "ok" ] && issue_count=$((issue_count + 1))
    [ "$gps_health" != "ok" ] && issue_count=$((issue_count + 1))
    [ "$starlink_health" != "ok" ] && issue_count=$((issue_count + 1))
    [ "$mwan3_health" != "ok" ] && issue_count=$((issue_count + 1))
    [ "$ubus_health" != "ok" ] && issue_count=$((issue_count + 1))
    
    if [ $issue_count -ge 3 ]; then
        log "Multiple system issues detected - creating diagnostic bundle"
        create_diagnostic_bundle >/dev/null 2>&1
    fi
    
    log "Comprehensive health check completed"
}

# Main function
main() {
    case "${1:-}" in
        --help|-h)
            echo "Usage: $0 [--help|--health-check|--daemon|--test-all]"
            echo "  --help         Show this help"
            echo "  --health-check Run single health check"
            echo "  --daemon       Run as daemon (continuous monitoring)"
            echo "  --test-all     Test all systems without fixing"
            ;;
        --health-check)
            main_health_check
            ;;
        --test-all)
            echo "Testing all systems..."
            echo "ubus: $(test_ubus && echo "ok" || echo "failed")"
            echo "GPS: $(test_gps_system)"
            echo "Starlink: $(test_starlink)"
            echo "mwan3: $(test_mwan3)"
            echo "Daemon: $(check_daemon_health)"
            ;;
        --daemon|"")
            log "Starting enhanced starwatch daemon"
            while true; do
                main_health_check
                sleep 30
            done
            ;;
        *)
            echo "Unknown option: $1"
            echo "Use --help for usage information"
            exit 1
            ;;
    esac
}

# Run main function
main "$@"
