#!/bin/sh
# autonomyctl-direct - Command line interface for autonomy daemon
# This version can work directly with the rpcd plugin when ubus service is not registered

# Default values
UBUS_PATH="ubus"
SERVICE_NAME="autonomy"
PLUGIN_PATH="/usr/local/usr/libexec/rpcd/autonomy"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Helper functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if ubus is available
check_ubus() {
    if ! command -v "$UBUS_PATH" >/dev/null 2>&1; then
        log_error "ubus command not found. Please ensure ubus is installed."
        exit 1
    fi
}

# Check if autonomy service is available via ubus
check_service() {
    if "$UBUS_PATH" list | grep -q "^$SERVICE_NAME$"; then
        return 0  # Service found
    else
        return 1  # Service not found
    fi
}

# Check if direct plugin is available
check_plugin() {
    if [ -x "$PLUGIN_PATH" ]; then
        return 0  # Plugin found
    else
        return 1  # Plugin not found
    fi
}

# Call method via ubus service
call_via_ubus() {
    local method="$1"
    shift
    "$UBUS_PATH" call "$SERVICE_NAME" "$method" "$@"
}

# Call method via direct plugin
call_via_plugin() {
    local method="$1"
    shift
    "$PLUGIN_PATH" call "$method" "$@"
}

# Smart call - try ubus first, fall back to plugin
smart_call() {
    local method="$1"
    shift
    
    if check_service; then
        call_via_ubus "$method" "$@"
    else
        if check_plugin; then
            log_info "Using direct plugin (ubus service not registered)"
            call_via_plugin "$method" "$@"
        else
            log_error "Neither ubus service nor direct plugin available"
            exit 1
        fi
    fi
}

# Format JSON output
format_json() {
    if command -v jq >/dev/null 2>&1; then
        jq .
    else
        cat
    fi
}

# Show usage
show_usage() {
    cat << EOF
Usage: autonomyctl-direct <command> [options]

Commands:
  status                    Show current status and summary
  info                      Show daemon information
  members                   List all discovered members (limited)
  
Options:
  -h, --help               Show this help message
  -v, --version            Show version information
  -d, --direct             Force direct plugin mode
  -u, --ubus               Force ubus service mode

Examples:
  autonomyctl-direct status
  autonomyctl-direct info
  autonomyctl-direct --direct status

EOF
}

# Show version
show_version() {
    echo "autonomyctl-direct version 1.0.0"
    echo "Direct plugin interface for autonomy daemon"
}

# Main command handlers
cmd_status() {
    log_info "Getting autonomy status..."
    smart_call status | format_json
}

cmd_info() {
    log_info "Getting autonomy info..."
    smart_call info | format_json
}

cmd_members() {
    log_info "Getting member information..."
    smart_call members | format_json
}

# Main script logic
main() {
    FORCE_DIRECT=0
    FORCE_UBUS=0
    
    # Parse command line arguments
    while [ $# -gt 0 ]; do
        case "$1" in
            -h|--help)
                show_usage
                exit 0
                ;;
            -v|--version)
                show_version
                exit 0
                ;;
            -d|--direct)
                FORCE_DIRECT=1
                shift
                ;;
            -u|--ubus)
                FORCE_UBUS=1
                shift
                ;;
            status)
                check_ubus
                cmd_status
                exit 0
                ;;
            info)
                check_ubus
                cmd_info
                exit 0
                ;;
            members)
                check_ubus
                cmd_members
                exit 0
                ;;
            *)
                log_error "Unknown command: $1"
                show_usage
                exit 1
                ;;
        esac
    done
    
    # No command provided
    log_error "No command specified"
    show_usage
    exit 1
}

# Run main function with all arguments
main "$@"
