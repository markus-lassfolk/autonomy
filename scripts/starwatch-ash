#!/bin/sh

# autonomy Watchdog - Ash Compatible Version
# Focused on ubus/rpcd health monitoring and recovery

# File paths
HB=/tmp/autonomyd.health
RESTARTS=/tmp/autonomyd.restarts

# Default values
HEARTBEAT_STALE_SEC=60
CRASH_LOOP_THRESHOLD=3
CRASH_LOOP_WINDOW_SEC=600
COOLDOWN_MINUTES=30
SLOW_UBUS_MS=1500

# Logging function
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') starwatch: $*" | logger -t starwatch
}

# Probe ubus connectivity
probe_ubus() {
    timeout 3 ubus -S call system board '{}' >/dev/null 2>&1
}

# Test ubus latency
lat_ubus() {
    t0=$(date +%s%3N 2>/dev/null || date +%s000)
    ubus -S call system board '{}' >/dev/null 2>&1
    t1=$(date +%s%3N 2>/dev/null || date +%s000)
    echo $((t1-t0))
}

# Check if daemon is healthy
check_daemon_health() {
    daemon_ok=true
    
    # Check if process exists
    if ! pidof autonomyd >/dev/null 2>&1; then
        daemon_ok=false
        log "Daemon process not found"
    fi
    
    # Check heartbeat file
    if [ ! -f "$HB" ]; then
        daemon_ok=false
        log "Heartbeat file not found: $HB"
    else
        # Check heartbeat age
        heartbeat_age=$(( $(date +%s) - $(date -r "$HB" +%s 2>/dev/null || echo 0) ))
        if [ $heartbeat_age -gt $HEARTBEAT_STALE_SEC ]; then
            daemon_ok=false
            log "Heartbeat stale: ${heartbeat_age}s old (threshold: ${HEARTBEAT_STALE_SEC}s)"
        fi
    fi
    
    echo "$daemon_ok"
}

# Check crash loop
check_crash_loop() {
    if [ ! -f "$RESTARTS" ]; then
        echo "false"
        return
    fi
    
    # Count restarts in the last window
    now=$(date +%s)
    recent_restarts=0
    
    while IFS= read -r timestamp; do
        if [ $((now - timestamp)) -le $CRASH_LOOP_WINDOW_SEC ]; then
            recent_restarts=$((recent_restarts + 1))
        fi
    done < "$RESTARTS"
    
    if [ $recent_restarts -ge $CRASH_LOOP_THRESHOLD ]; then
        log "Crash loop detected: $recent_restarts restarts in ${CRASH_LOOP_WINDOW_SEC}s"
        echo "true"
    else
        echo "false"
    fi
}

# Record restart
record_restart() {
    echo "$(date +%s)" >> "$RESTARTS"
    
    # Clean old entries
    now=$(date +%s)
    temp_file=$(mktemp)
    while IFS= read -r timestamp; do
        if [ $((now - timestamp)) -le $CRASH_LOOP_WINDOW_SEC ]; then
            echo "$timestamp" >> "$temp_file"
        fi
    done < "$RESTARTS"
    mv "$temp_file" "$RESTARTS" 2>/dev/null || true
}

# Main health check function
main_health_check() {
    log "Starting health check"
    
    # Get system metrics
    ubus_latency=$(lat_ubus 2>/dev/null || echo "9999")
    
    # Check daemon health
    daemon_ok=$(check_daemon_health)
    crash_loop=$(check_crash_loop)
    
    # Scenario 1: Daemon health issues
    if [ "$daemon_ok" = "false" ]; then
        log "Daemon health check failed"
        
        # Check if we should hold down due to crash loop
        if [ "$crash_loop" = "true" ]; then
            log "Crash loop detected - engaging hold-down for ${COOLDOWN_MINUTES} minutes"
            
            # Stop daemon for cooldown period
            /etc/init.d/autonomy stop 2>/dev/null || true
            sleep $((COOLDOWN_MINUTES * 60))
        fi
        
        # Restart daemon
        /etc/init.d/autonomy restart 2>/dev/null || true
        record_restart
    fi
    
    # Scenario 2: ubus/rpcd issues
    if ! probe_ubus; then
        log "ubus/rpcd not responding - attempting restart"
        /etc/init.d/ubus restart 2>/dev/null || true
        /etc/init.d/rpcd restart 2>/dev/null || true
        log "ubus/rpcd restart completed"
    elif [ $ubus_latency -gt $SLOW_UBUS_MS ]; then
        log "Slow ubus response: ${ubus_latency}ms"
    fi
    
    log "Health check completed"
}

# Main function
main() {
    case "${1:-}" in
        --help|-h)
            echo "Usage: $0 [--help|--health-check|--daemon]"
            echo "  --help         Show this help"
            echo "  --health-check Run single health check"
            echo "  --daemon       Run as daemon (continuous monitoring)"
            ;;
        --health-check)
            main_health_check
            ;;
        --daemon|"")
            log "Starting starwatch daemon"
            while true; do
                main_health_check
                sleep 30
            done
            ;;
        *)
            echo "Unknown option: $1"
            echo "Use --help for usage information"
            exit 1
            ;;
    esac
}

# Run main function
main "$@"
